{"version":3,"sources":["components/Form.module.css","components/Task.module.css","components/App.module.css","components/Form.js","components/Task.js","components/List.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","form","textbox","button","container","task","fadein","app","title","Form","props","_useState","useState","_useState2","Object","slicedToArray","taskName","setTaskName","react_default","a","createElement","id","name","autoComplete","onSubmit","e","preventDefault","localStorage","getItem","setItem","taskArray","split","push","join","setUpdate","className","style","type","placeholder","value","onChange","target","required","Task","onClick","updatedTaskArray","splice","index","length","removeItem","List","setTaskArray","useEffect","tasks","update","map","item","components_Task","key","App","components_Form","components_List","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6794cc3f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__1Yr6U\",\"textbox\":\"Form_textbox__zg-05\",\"button\":\"Form_button__3fQu5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Task_container__1jc5Q\",\"task\":\"Task_task__MHU87\",\"fadein\":\"Task_fadein__2lUdL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__27aTl\",\"title\":\"App_title__3U6oM\"};","import React, {useState} from 'react';\r\nimport style from './Form.module.css';\r\n\r\nconst Form = (props) => {\r\n  const [taskName, setTaskName] = useState(\"\");\r\n\r\n  const txtTaskName_OnChange = e => {\r\n    setTaskName(e.target.value);\r\n  }\r\n\r\n  const frmAddTask_OnSubmit = e => {\r\n    e.preventDefault();\r\n    if (localStorage.getItem(\"tasks\") === null) {\r\n      localStorage.setItem(\"tasks\", taskName);\r\n    }\r\n    else {\r\n      const tasks = localStorage.getItem(\"tasks\");\r\n      const taskArray = (tasks.split(\"::\"));\r\n      taskArray.push(taskName)\r\n      localStorage.setItem(\"tasks\", taskArray.join(\"::\"));\r\n    }\r\n    setTaskName(\"\");\r\n    props.setUpdate(true);\r\n  }\r\n\r\n  return (\r\n    <form id=\"frmAddTask\" name=\"frmAddTask\" autoComplete=\"off\"\r\n      onSubmit={frmAddTask_OnSubmit} className={style.form}>\r\n      <input\r\n        id=\"txtTaskName\"\r\n        type=\"text\"\r\n        placeholder=\"task name\"\r\n        value={taskName}\r\n        onChange={txtTaskName_OnChange}\r\n        className={style.textbox}\r\n        required\r\n      />\r\n      <button\r\n        id=\"btnAdd\"\r\n        name=\"btnAdd\"\r\n        type=\"submit\"\r\n        className={style.button}>\r\n        Add\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport style from './Task.module.css';\r\n\r\nconst Task = (props) => {\r\n  const divTask_OnClick = e => {\r\n    e.preventDefault();\r\n    const updatedTaskArray = props.taskArray;\r\n    updatedTaskArray.splice(props.index, 1);\r\n    if (updatedTaskArray.length === 0) {\r\n      localStorage.removeItem(\"tasks\");\r\n    }\r\n    else {\r\n      localStorage.setItem(\"tasks\", (updatedTaskArray.join(\"::\")));\r\n    }\r\n    props.setUpdate(true);\r\n  }\r\n\r\n  return (\r\n    <div className={style.container}>\r\n      <div id=\"divTask\" className={style.task} onClick={divTask_OnClick}>\r\n        <h2>{props.taskName}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Task;","import React, {useState, useEffect} from 'react';\r\nimport Task from './Task';\r\n\r\nconst List = (props) => {\r\n  const [taskArray, setTaskArray] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"tasks\") !== null) {\r\n      const tasks = localStorage.getItem(\"tasks\");\r\n      setTaskArray(tasks.split(\"::\"));\r\n    }\r\n    props.setUpdate(false);\r\n  }, [props.update]);\r\n\r\n  return (\r\n    <div>\r\n      {taskArray.map((item, index) => (\r\n        <Task key={index} index={index} taskName={item} taskArray={taskArray} setUpdate={props.setUpdate}/>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default List;","import React, {useState} from 'react';\nimport Form from './Form';\nimport List from './List';\nimport style from './App.module.css';\n\nconst App = () => {\n  const [update, setUpdate] = useState(false);\n\n  return (\n    <div className={style.app}>\n      <h1 className={style.title}>To-Do List</h1>\n      <Form setUpdate={setUpdate} />\n      <List update={update} setUpdate={setUpdate} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}